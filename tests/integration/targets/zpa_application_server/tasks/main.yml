---
- block:
    - name: Ensure ZPA API Credential is Set
      ansible.builtin.fail:
        msg: client_id, client_secret and customer_id should be defined in tests/integration/integration_config.yml
      when:
        - client_id is not defined
        - client_secret is not defined
        - customer_id  is not defined
        - client_id | length == 0
        - client_secret | length == 0
        - customer_id | length == 0

    - name: Ensure Application Server is absent (leftover)
      willguibr.zpacloud.zpa_application_server:
        state: absent
        client_id: "{{ client_id }}"
        client_secret: "{{ client_secret }}"
        customer_id: "{{ customer_id }}"
        name: "{{ name }}"
        description: "{{ description }}"
        enabled: "{{ enabled }}"
        address: "{{ address }}"
        config_space: "{{ config_space }}"
      ignore_errors: true # In case one was left from previous run
      register: result

    - name: Ensure Application Server is (Absent)
      willguibr.zpacloud.zpa_application_server:
        state: absent
        client_id: "{{ client_id }}"
        client_secret: "{{ client_secret }}"
        customer_id: "{{ customer_id }}"
        name: "{{ name }}"
        description: "{{ description }}"
        enabled: "{{ enabled }}"
        address: "{{ address }}"
        config_space: "{{ config_space }}"
      ignore_errors: true # In case one was left from previous run
      register: result

    - name: Verify Application Server is absent
      ansible.builtin.assert:
        that:
          - not result.changed

    # Create Application Server (Present)
    - name: Create Application Server is (Present)
      willguibr.zpacloud.zpa_application_server:
        state: present
        client_id: "{{ client_id }}"
        client_secret: "{{ client_secret }}"
        customer_id: "{{ customer_id }}"
        name: "{{ name }}"
        description: "{{ description }}"
        enabled: "{{ enabled }}"
        address: "{{ address }}"
        config_space: "{{ config_space }}"
      register: result

    - name: Verify Application Server is present (from present)
      ansible.builtin.assert:
        that:
          - result.data
          - result.data.name is defined
          - result.data.enabled is true

    - name: Destroy Application Server is (again; idempotency check)
      willguibr.zpacloud.zpa_application_server:
        state: present
        client_id: "{{ client_id }}"
        client_secret: "{{ client_secret }}"
        customer_id: "{{ customer_id }}"
        name: "{{ name }}"
        description: "{{ description }}"
        enabled: "{{ enabled }}"
        address: "{{ address }}"
        config_space: "{{ config_space }}"
      register: result

    - name: Verify Application Server is absent (again; idempotency check)
      ansible.builtin.assert:
        that:
          - not result.changed

    - name: Fetch all Application Server
      willguibr.zpacloud.zpa_application_server_info:
        client_id: "{{ client_id }}"
        client_secret: "{{ client_secret }}"
        customer_id: "{{ customer_id }}"
      register: result

    - name: Ensure all Application Server found
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data[0] is defined

    - name: Delete Application Server
      willguibr.zpacloud.zpa_application_server:
        state: absent
        client_id: "{{ client_id }}"
        client_secret: "{{ client_secret }}"
        customer_id: "{{ customer_id }}"
        name: "{{ name }}"
        description: "{{ description }}"
        enabled: "{{ enabled }}"
        address: "{{ address }}"
        config_space: "{{ config_space }}"
      register: result

    - name: Verify Application Server is absent
      ansible.builtin.assert:
        that:
          - not result.changed

    - name: Delete Application Server (again; idempotency check)
      willguibr.zpacloud.zpa_application_server:
        state: absent
        client_id: "{{ client_id }}"
        client_secret: "{{ client_secret }}"
        customer_id: "{{ customer_id }}"
        name: "{{ name }}"
        description: "{{ description }}"
        enabled: "{{ enabled }}"
        address: "{{ address }}"
        config_space: "{{ config_space }}"
      register: result

    - name: Verify Application Server is absent
      ansible.builtin.assert:
        that:
          - not result.changed
